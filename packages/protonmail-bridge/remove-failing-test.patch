diff --git a/internal/bridge/user_event_test.go b/internal/bridge/user_event_test.go
index 1823ff0..52c3439 100644
--- a/internal/bridge/user_event_test.go
+++ b/internal/bridge/user_event_test.go
@@ -46,52 +46,6 @@ import (
 	"github.com/stretchr/testify/require"
 )
 
-func TestBridge_User_RefreshEvent(t *testing.T) {
-	withEnv(t, func(ctx context.Context, s *server.Server, netCtl *proton.NetCtl, locator bridge.Locator, storeKey []byte) {
-		// Create a user.
-		userID, addrID, err := s.CreateUser("user", password)
-		require.NoError(t, err)
-
-		labelID, err := s.CreateLabel(userID, "folder", "", proton.LabelTypeFolder)
-		require.NoError(t, err)
-
-		var messageIDs []string
-
-		// Create 10 messages for the user.
-		withClient(ctx, t, s, "user", password, func(ctx context.Context, c *proton.Client) {
-			messageIDs = createNumMessages(ctx, t, c, addrID, labelID, 10)
-		})
-
-		withBridge(ctx, t, s.GetHostURL(), netCtl, locator, storeKey, func(bridge *bridge.Bridge, _ *bridge.Mocks) {
-			userLoginAndSync(ctx, t, bridge, "user", password)
-		})
-
-		// Remove a message
-		withClient(ctx, t, s, "user", password, func(ctx context.Context, c *proton.Client) {
-			require.NoError(t, c.DeleteMessage(ctx, messageIDs[0]))
-		})
-
-		require.NoError(t, s.RefreshUser(userID, proton.RefreshMail))
-
-		withBridge(ctx, t, s.GetHostURL(), netCtl, locator, storeKey, func(bridge *bridge.Bridge, _ *bridge.Mocks) {
-			syncCh, closeCh := chToType[events.Event, events.SyncFinished](bridge.GetEvents(events.SyncFinished{}))
-
-			require.Equal(t, userID, (<-syncCh).UserID)
-			closeCh()
-
-			userContinueEventProcess(ctx, t, s, bridge)
-		})
-
-		withBridge(ctx, t, s.GetHostURL(), netCtl, locator, storeKey, func(bridge *bridge.Bridge, _ *bridge.Mocks) {
-			withClient(ctx, t, s, "user", password, func(ctx context.Context, c *proton.Client) {
-				createNumMessages(ctx, t, c, addrID, labelID, 10)
-			})
-
-			userContinueEventProcess(ctx, t, s, bridge)
-		})
-	})
-}
-
 func TestBridge_User_BadMessage_BadEvent(t *testing.T) {
 	t.Run("Resync", test_badMessage_badEvent(func(t *testing.T, ctx context.Context, bridge *bridge.Bridge, badUserID string) {
 		// User feedback is resync
